Overview:

An array is a sequence of elements.
-> Can be indexed in O(1) time. This is called O(1) Random Access.
-> Stores elements in contiguous memory locations.
-> 0-based indexing

Notes:

Sorted Array?
-> if an array is sorted, it usually means the algorithm can
leverage this piece of information to optimize the time complexity
-> ex: if the array is sorted, you may need to and be able to use 
binary search, which is O(log n) instead of O(n).

Do You Need To Sort The Array?
-> sometimes sorting the array can significantly simplify the Problem
-> make sure the order of elements does not need to be preserved 
before sorting though!

Do You Need Summation or Product of Subarray?
-> sometimes, pre-computation using prefix sum/product may be helpful!
-> or pre-computation using hashing?

If Interviewer Asks For O(1) Space?
-> in this case, you cannot use a hash table to simplify the Problem
-> you may be able to use the given array itself as an 'hash table'
-> ex: if the array only has values from 1 to N (length of array), negate the 
value at that index to indicate presence of that number!

Iterating Through Array Using Indices?
-> make sure you don't go out of bounds when iterating
-> sometimes, you can and may need to iterate from the right

Slicing or Concatenating Arrays?
-> be mindful that slicing and concatenating arrays requires O(n) time
-> where possible, use 'start' and 'end' indices to replicate the slice

Given Two Arrays?
-> it is usually common to have two pointers, one for each array
-> compare elements at the pointers and iterate pointers accordingly

Corner Cases:

* Empty array
* Array with only 1 or 2 elements
* Array with repeated elements

Applicable Concepts:

* Sliding Window
* Prefix Sum
* Binary Search